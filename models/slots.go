// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Slot is an object representing the database table.
type Slot struct {
	ID      string `boil:"id" json:"id" toml:"id" yaml:"id"`
	IsTaken bool   `boil:"is_taken" json:"is_taken" toml:"is_taken" yaml:"is_taken"`
	TakenBy string `boil:"taken_by" json:"taken_by" toml:"taken_by" yaml:"taken_by"`

	R *slotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L slotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SlotColumns = struct {
	ID      string
	IsTaken string
	TakenBy string
}{
	ID:      "id",
	IsTaken: "is_taken",
	TakenBy: "taken_by",
}

var SlotTableColumns = struct {
	ID      string
	IsTaken string
	TakenBy string
}{
	ID:      "slots.id",
	IsTaken: "slots.is_taken",
	TakenBy: "slots.taken_by",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var SlotWhere = struct {
	ID      whereHelperstring
	IsTaken whereHelperbool
	TakenBy whereHelperstring
}{
	ID:      whereHelperstring{field: "\"slots\".\"id\""},
	IsTaken: whereHelperbool{field: "\"slots\".\"is_taken\""},
	TakenBy: whereHelperstring{field: "\"slots\".\"taken_by\""},
}

// SlotRels is where relationship names are stored.
var SlotRels = struct {
	TakenByUser string
}{
	TakenByUser: "TakenByUser",
}

// slotR is where relationships are stored.
type slotR struct {
	TakenByUser *User `boil:"TakenByUser" json:"TakenByUser" toml:"TakenByUser" yaml:"TakenByUser"`
}

// NewStruct creates a new relationship struct
func (*slotR) NewStruct() *slotR {
	return &slotR{}
}

func (r *slotR) GetTakenByUser() *User {
	if r == nil {
		return nil
	}
	return r.TakenByUser
}

// slotL is where Load methods for each relationship are stored.
type slotL struct{}

var (
	slotAllColumns            = []string{"id", "is_taken", "taken_by"}
	slotColumnsWithoutDefault = []string{"id", "taken_by"}
	slotColumnsWithDefault    = []string{"is_taken"}
	slotPrimaryKeyColumns     = []string{"id"}
	slotGeneratedColumns      = []string{}
)

type (
	// SlotSlice is an alias for a slice of pointers to Slot.
	// This should almost always be used instead of []Slot.
	SlotSlice []*Slot
	// SlotHook is the signature for custom Slot hook methods
	SlotHook func(context.Context, boil.ContextExecutor, *Slot) error

	slotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	slotType                 = reflect.TypeOf(&Slot{})
	slotMapping              = queries.MakeStructMapping(slotType)
	slotPrimaryKeyMapping, _ = queries.BindMapping(slotType, slotMapping, slotPrimaryKeyColumns)
	slotInsertCacheMut       sync.RWMutex
	slotInsertCache          = make(map[string]insertCache)
	slotUpdateCacheMut       sync.RWMutex
	slotUpdateCache          = make(map[string]updateCache)
	slotUpsertCacheMut       sync.RWMutex
	slotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var slotAfterSelectHooks []SlotHook

var slotBeforeInsertHooks []SlotHook
var slotAfterInsertHooks []SlotHook

var slotBeforeUpdateHooks []SlotHook
var slotAfterUpdateHooks []SlotHook

var slotBeforeDeleteHooks []SlotHook
var slotAfterDeleteHooks []SlotHook

var slotBeforeUpsertHooks []SlotHook
var slotAfterUpsertHooks []SlotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Slot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Slot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Slot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Slot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Slot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Slot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Slot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Slot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Slot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range slotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSlotHook registers your hook function for all future operations.
func AddSlotHook(hookPoint boil.HookPoint, slotHook SlotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		slotAfterSelectHooks = append(slotAfterSelectHooks, slotHook)
	case boil.BeforeInsertHook:
		slotBeforeInsertHooks = append(slotBeforeInsertHooks, slotHook)
	case boil.AfterInsertHook:
		slotAfterInsertHooks = append(slotAfterInsertHooks, slotHook)
	case boil.BeforeUpdateHook:
		slotBeforeUpdateHooks = append(slotBeforeUpdateHooks, slotHook)
	case boil.AfterUpdateHook:
		slotAfterUpdateHooks = append(slotAfterUpdateHooks, slotHook)
	case boil.BeforeDeleteHook:
		slotBeforeDeleteHooks = append(slotBeforeDeleteHooks, slotHook)
	case boil.AfterDeleteHook:
		slotAfterDeleteHooks = append(slotAfterDeleteHooks, slotHook)
	case boil.BeforeUpsertHook:
		slotBeforeUpsertHooks = append(slotBeforeUpsertHooks, slotHook)
	case boil.AfterUpsertHook:
		slotAfterUpsertHooks = append(slotAfterUpsertHooks, slotHook)
	}
}

// OneG returns a single slot record from the query using the global executor.
func (q slotQuery) OneG(ctx context.Context) (*Slot, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single slot record from the query.
func (q slotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Slot, error) {
	o := &Slot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for slots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Slot records from the query using the global executor.
func (q slotQuery) AllG(ctx context.Context) (SlotSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Slot records from the query.
func (q slotQuery) All(ctx context.Context, exec boil.ContextExecutor) (SlotSlice, error) {
	var o []*Slot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Slot slice")
	}

	if len(slotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Slot records in the query using the global executor
func (q slotQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Slot records in the query.
func (q slotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count slots rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q slotQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q slotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if slots exists")
	}

	return count > 0, nil
}

// TakenByUser pointed to by the foreign key.
func (o *Slot) TakenByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TakenBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTakenByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (slotL) LoadTakenByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSlot interface{}, mods queries.Applicator) error {
	var slice []*Slot
	var object *Slot

	if singular {
		var ok bool
		object, ok = maybeSlot.(*Slot)
		if !ok {
			object = new(Slot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSlot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSlot))
			}
		}
	} else {
		s, ok := maybeSlot.(*[]*Slot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSlot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSlot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &slotR{}
		}
		args = append(args, object.TakenBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &slotR{}
			}

			for _, a := range args {
				if a == obj.TakenBy {
					continue Outer
				}
			}

			args = append(args, obj.TakenBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(slotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TakenByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TakenBySlots = append(foreign.R.TakenBySlots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TakenBy == foreign.ID {
				local.R.TakenByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TakenBySlots = append(foreign.R.TakenBySlots, local)
				break
			}
		}
	}

	return nil
}

// SetTakenByUserG of the slot to the related item.
// Sets o.R.TakenByUser to related.
// Adds o to related.R.TakenBySlots.
// Uses the global database handle.
func (o *Slot) SetTakenByUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetTakenByUser(ctx, boil.GetContextDB(), insert, related)
}

// SetTakenByUser of the slot to the related item.
// Sets o.R.TakenByUser to related.
// Adds o to related.R.TakenBySlots.
func (o *Slot) SetTakenByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"taken_by"}),
		strmangle.WhereClause("\"", "\"", 2, slotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TakenBy = related.ID
	if o.R == nil {
		o.R = &slotR{
			TakenByUser: related,
		}
	} else {
		o.R.TakenByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			TakenBySlots: SlotSlice{o},
		}
	} else {
		related.R.TakenBySlots = append(related.R.TakenBySlots, o)
	}

	return nil
}

// Slots retrieves all the records using an executor.
func Slots(mods ...qm.QueryMod) slotQuery {
	mods = append(mods, qm.From("\"slots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"slots\".*"})
	}

	return slotQuery{q}
}

// FindSlotG retrieves a single record by ID.
func FindSlotG(ctx context.Context, iD string, selectCols ...string) (*Slot, error) {
	return FindSlot(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSlot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSlot(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Slot, error) {
	slotObj := &Slot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"slots\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, slotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from slots")
	}

	if err = slotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return slotObj, err
	}

	return slotObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Slot) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Slot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no slots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(slotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	slotInsertCacheMut.RLock()
	cache, cached := slotInsertCache[key]
	slotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			slotAllColumns,
			slotColumnsWithDefault,
			slotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(slotType, slotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(slotType, slotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"slots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"slots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into slots")
	}

	if !cached {
		slotInsertCacheMut.Lock()
		slotInsertCache[key] = cache
		slotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Slot record using the global executor.
// See Update for more documentation.
func (o *Slot) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Slot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Slot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	slotUpdateCacheMut.RLock()
	cache, cached := slotUpdateCache[key]
	slotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			slotAllColumns,
			slotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update slots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"slots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, slotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(slotType, slotMapping, append(wl, slotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update slots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for slots")
	}

	if !cached {
		slotUpdateCacheMut.Lock()
		slotUpdateCache[key] = cache
		slotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q slotQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q slotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for slots")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SlotSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SlotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, slotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in slot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all slot")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Slot) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Slot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no slots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(slotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	slotUpsertCacheMut.RLock()
	cache, cached := slotUpsertCache[key]
	slotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			slotAllColumns,
			slotColumnsWithDefault,
			slotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			slotAllColumns,
			slotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert slots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(slotPrimaryKeyColumns))
			copy(conflict, slotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"slots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(slotType, slotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(slotType, slotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert slots")
	}

	if !cached {
		slotUpsertCacheMut.Lock()
		slotUpsertCache[key] = cache
		slotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Slot record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Slot) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Slot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Slot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Slot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), slotPrimaryKeyMapping)
	sql := "DELETE FROM \"slots\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for slots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q slotQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q slotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no slotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for slots")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SlotSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SlotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(slotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"slots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, slotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from slot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for slots")
	}

	if len(slotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Slot) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Slot provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Slot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSlot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SlotSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty SlotSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SlotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SlotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"slots\".* FROM \"slots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, slotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SlotSlice")
	}

	*o = slice

	return nil
}

// SlotExistsG checks if the Slot row exists.
func SlotExistsG(ctx context.Context, iD string) (bool, error) {
	return SlotExists(ctx, boil.GetContextDB(), iD)
}

// SlotExists checks if the Slot row exists.
func SlotExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"slots\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if slots exists")
	}

	return exists, nil
}
